generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  DEVELOPER
  TESTER
  VIEWER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id        String        @id @default(uuid())
  name      String
  email     String        @unique
  password  String
  role      Role          @default(VIEWER) // Default role is VIEWER
  isDeleted Boolean       @default(false)  // âœ… Soft delete

  // Relations
  assignedTasks     Task[]         @relation("AssignedTasks")
  createdTasks      Task[]         @relation("CreatedTasks")
  comments          Comment[]      @relation("UserComments")
  projects          Project[]      @relation("UserProjects")
  assignedSubtasks  Subtask[]      @relation("SubtaskAssignedTo")
  notifications     Notification[]

  // You may choose to handle role-based access control via middleware rather than flags here
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Foreign Keys
  projectId    String
  assignedToId String?
  createdById  String

  // Relations
  project     Project   @relation(fields: [projectId], references: [id])
  assignedTo  User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdBy   User      @relation("CreatedTasks", fields: [createdById], references: [id])
  comments    Comment[]
  subtasks    Subtask[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  // Relations
  createdBy User   @relation("UserProjects", fields: [createdById], references: [id])
  tasks     Task[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign Keys
  taskId   String
  authorId String

  // Relations
  task   Task @relation(fields: [taskId], references: [id])
  author User @relation("UserComments", fields: [authorId], references: [id])
}

model Subtask {
  id           String     @id @default(uuid())
  title        String
  status       TaskStatus @default(PENDING)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Foreign Keys
  taskId       String
  assignedToId String?

  // Relations
  task        Task  @relation(fields: [taskId], references: [id])
  assignedTo  User? @relation("SubtaskAssignedTo", fields: [assignedToId], references: [id])
}

model Notification {
  id           String   @id @default(uuid())
  content      String
  isRead       Boolean  @default(false)
  recipientId  String
  createdAt    DateTime @default(now())

  // Relations
  recipient    User     @relation(fields: [recipientId], references: [id])
}
