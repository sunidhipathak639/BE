generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  DEVELOPER
  TESTER
  VIEWER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String
  role     Role   @default(VIEWER)

  // Relations
  assignedTasks Task[]    @relation("AssignedTasks") // ðŸ‘ˆ backref for assignedTo
  createdTasks  Task[]    @relation("CreatedTasks") // ðŸ‘ˆ backref for createdBy
  comments      Comment[] @relation("UserComments") // ðŸ‘ˆ backref for author
  projects      Project[] @relation("UserProjects") // ðŸ‘ˆ backref for Project.createdBy
  Subtask       Subtask[]
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Foreign keys
  projectId    String
  assignedToId String?
  createdById  String

  // Relations
  project    Project   @relation(fields: [projectId], references: [id])
  assignedTo User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdBy  User      @relation("CreatedTasks", fields: [createdById], references: [id])
  comments   Comment[]
  subtasks   Subtask[] // Add this line inside the Task model
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  // Relations
  createdBy User   @relation("UserProjects", fields: [createdById], references: [id])
  tasks     Task[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  taskId   String
  authorId String

  // Relations
  task   Task @relation(fields: [taskId], references: [id])
  author User @relation("UserComments", fields: [authorId], references: [id])
}

model Subtask {
  id        String     @id @default(uuid())
  title     String
  status    TaskStatus @default(PENDING)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Foreign Keys
  taskId       String
  assignedToId String?

  // Relations
  task       Task  @relation(fields: [taskId], references: [id])
  assignedTo User? @relation(fields: [assignedToId], references: [id])
}
